@mixin root() {
  @each $name, $font in $fonts {
    $family: "#{map-get($font, 'family')}";
    $variations: map-get($font, 'variations');

    @each $style, $map-weights in $variations {
      @each $weight, $map-src in $map-weights {
        $src: '';

        $locals: map-get($map-src, 'local');
        @each $local in $locals {
          $src: $src + 'local("#{$local}"), ';
        }

        $urls: map-get($map-src, 'url');
        $path: map-get($urls, 'path');
        $types: map-get($urls, 'types');
        $length: length($types);
        @each $type in $types {
          $i: index($types, $type);
          @debug $i, $length;
          @if ($i < $length) {
            $src: $src + 'url("#{$path}.#{$type}") format("#{$type}"), ';
          } @else {
            $src: $src + 'url("#{$path}.#{$type}") format("#{$type}");';
          }
        }
        @font-face {
          font-family: $family;
          font-style: $style;
          font-weight: $weight;
          src: #{$src};
        }
      }
    }

    // , map-get($font, 'safe'),
    //  map-get($font, 'type')
  }
  :root {
    @for $i from $modular-scale-init to $modular-scale-size {
      @include ms-respond('--ms-#{$i}', $i);
    }

    @for $i from $vertical-rhythm-init to $vertical-rhythm-size {
      --vr-#{$i}: #{($i + 1) * $vertical-rhythm-base}rem;
    }

    font-size: var(--ms-0);

    @each $name, $content in $colors {
      @if (
        map-has-key($content, 'schema') and map-get($content, 'schema') == true
      ) {
        @debug $name;
      } @else {
        $variations: map-remove($content, 'schema');
        @each $key, $map-values in $variations {
          $hex: map-get($map-values, 'hex');
          $op: map-get($map-values, 'op');

          @each $name-op, $value-op in $op {
            --color-#{$name}-#{$name-op}: #{rgba($hex, $value-op)};
          }
        }
      }
    }

    // @include colorsBg($root: true);

    body {
      //  @include colorsBg($inherit: true);
    }
  }
}
