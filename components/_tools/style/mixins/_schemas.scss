@mixin util-colors($default, $variation) {
  $type: get-type-schema-colors($default);
  $util: map-get(map-get($colors-auto-variations, $type), $variation);
  $map-util-colors: map-get($util, 'hue');
  @each $name, $hue in $map-util-colors {
    @if (type-of($hue) == 'map') {
      $h: map-get($hue, 'hue');
      $al: map-get($hue, 'al');
      $color: gen-auto-color($h, $variation, $default);
      @if ($al) {
        @if ($al > 0) {
          #{gen-var-color-name($name, 'util')}: #{lighten($color, $al)};
        } @else {
          #{gen-var-color-name($name, 'util')}: #{darken($color, abs($al))};
        }
      } @else {
        #{gen-var-color-name($name, 'util')}: #{$color};
      }
    } @else {
      #{gen-var-color-name($name, 'util')}: #{gen-auto-color(
          $hue,
          $variation,
          $default
        )};
    }
  }
}

@mixin auto-colors($hue, $default, $variation, $prefix) {
  @if ($variation == util) {
    @include util-colors($default, $variation);
  } @else if($variation == text) {
    @debug $default, $variation;
  } @else {
    #{$prefix}-#{$variation}: #{gen-auto-color($hue, $variation, $default)};
  }
}

@mixin manual-colors($value, $variation, $prefix) {
  @if ($variation == util) {
    @debug $variation, $value;
  } @else if($variation == text) {
    @debug $variation, $value;
  } @else {
    $s: map-get($value, 's');
    $l: map-get($value, 'l');
    $ah: map-get($value, 'ah');
    #{$prefix}-#{$variation}: #{adjust-hue(hsl($hue, $s, $l), $ah)};
  }
}

@mixin schema-values($map-hue, $default: true) {
  @each $color-name, $configs in $map-hue {
    @each $hue, $fallbacks in $configs {
      $prefix: gen-var-color-name($color-name);
      #{$prefix}: #{gen-auto-color($hue)};
      @each $variation, $value in $fallbacks {
        @if ($value == auto) {
          @include auto-colors($hue, $default, $variation, $prefix);
        } @else {
          @include manual-colors($value, $variation, $prefix);
        }
      }
    }
  }
}

@mixin schemas-host() {
  @each $name, $map-hue in $schemas {
    :host([schema='#{$name}']) {
      @include schema-values($map-hue);
    }
    :host([schema='#{$name}'][alt-cl]) {
      @include schema-values($map-hue, false);
    }
  }
}
@mixin schemas-root() {
  @each $name, $map-hue in $schemas {
    .mnv-schema-#{$name} {
      @include schema-values($map-hue);

      &.mnv-alt-cl {
        @include schema-values($map-hue, false);
      }
    }
  }
}
